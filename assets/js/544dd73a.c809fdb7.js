"use strict";(self.webpackChunkuniversalreference_io=self.webpackChunkuniversalreference_io||[]).push([[4283],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=i,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(m,r(r({ref:t},p),{},{components:n})):a.createElement(m,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1072:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={slug:"intro",title:"Intro",tags:["edu","docs","quickstart"],description:"Getting Started using Emporous Client.\n"},r=void 0,l={unversionedId:"Quick Start/intro",id:"Quick Start/intro",title:"Intro",description:"Getting Started using Emporous Client.\n",source:"@site/docs/Quick Start/intro.md",sourceDirName:"Quick Start",slug:"/Quick Start/intro",permalink:"/docs/Quick Start/intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Quick Start/intro.md",tags:[{label:"edu",permalink:"/docs/tags/edu"},{label:"docs",permalink:"/docs/tags/docs"},{label:"quickstart",permalink:"/docs/tags/quickstart"}],version:"current",frontMatter:{slug:"intro",title:"Intro",tags:["edu","docs","quickstart"],description:"Getting Started using Emporous Client.\n"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/category/getting-started"},next:{title:"Design",permalink:"/docs/category/design"}},s={},c=[{value:"Tools Required",id:"tools-required",level:2},{value:"Emporous Client",id:"emporous-client",level:2},{value:"Introduction to Collections",id:"introduction-to-collections",level:2},{value:"Interacting with a Collection",id:"interacting-with-a-collection",level:2},{value:"Assembling a Collection",id:"assembling-a-collection",level:3},{value:"Publishing a Collection",id:"publishing-a-collection",level:3},{value:"Exploring the Published Artifact",id:"exploring-the-published-artifact",level:3},{value:"Retrieving a Collection",id:"retrieving-a-collection",level:3},{value:"User Defined Attributes",id:"user-defined-attributes",level:2},{value:"Publishing a Collection With Attributes",id:"publishing-a-collection-with-attributes",level:3},{value:"Filtering Content by Attributes",id:"filtering-content-by-attributes",level:3},{value:"Next Steps",id:"next-steps",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This guide provides an overview of Emporous including everything that you need to get started from obtaining the necessary tooling to building, publishing and consuming content."),(0,i.kt)("h1",{id:"what-you-will-learn"},"What You Will Learn"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Emporous Client"),(0,i.kt)("li",{parentName:"ul"},"Collection Structure"),(0,i.kt)("li",{parentName:"ul"},"Interacting with Collections"),(0,i.kt)("li",{parentName:"ul"},"User Defined Attributes")),(0,i.kt)("h2",{id:"tools-required"},"Tools Required"),(0,i.kt)("p",null,"The following tools are required in order to complete the steps illustrated in this guide:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/containers/skopeo"},"skopeo")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://stedolan.github.io/jq/manual"},"jq"))),(0,i.kt)("h2",{id:"emporous-client"},"Emporous Client"),(0,i.kt)("p",null,"The primary method for interacting with Emporous resources is by using the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/emporous/emporous-go"},"Client"),". This CLI based utility includes capabilities to support assembling, publishing, retrieval and discovery."),(0,i.kt)("p",null,"The Client can be installed from the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/emporous/emporous-go/releases"},"releases")," page. Download the binary that corresponds with your operating system and add the binary to your ",(0,i.kt)("inlineCode",{parentName:"p"},"$PATH"),"."),(0,i.kt)("p",null,"Confirm the installation was successful by invoking the client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"emporous version\n")),(0,i.kt)("p",null,"Details related to the client will be presented if installation is successful."),(0,i.kt)("p",null,"Now that the client has been installed and configured, you are ready to start interacting with Emporous content."),(0,i.kt)("h2",{id:"introduction-to-collections"},"Introduction to Collections"),(0,i.kt)("p",null,"The primary purpose of the ",(0,i.kt)("em",{parentName:"p"},"client")," is to facilitate the interaction with ",(0,i.kt)("em",{parentName:"p"},"Collections"),". A Collection is a set of content that is bundled together and stored as an OCI artifact. The individual resources within the artifact are decorated with additional metadata to enable filtering, discovery and retrieval. The following sections will discuss the lifecycle of a collection including mechanisms for interacting with the content."),(0,i.kt)("h2",{id:"interacting-with-a-collection"},"Interacting with a Collection"),(0,i.kt)("p",null,"Now that we know what a Collection refers to, let's begin working through the lifecycle of a collection by first assembling one."),(0,i.kt)("h3",{id:"assembling-a-collection"},"Assembling a Collection"),(0,i.kt)("p",null,"Any type of content can be represented by Emporous. While the solution can be applied to a variety of use cases ranging from website content to AI model management, one of the most basic examples is managing a set of files on a file system. Files are given names, properties and organized into directories descending from a top level root. Emporous makes use of similar paradigms. Content is added to a top level directory, known as a workspace. Their existence along with the relationship to other content is assembled by the client into a Directed Acyclic Graph (DAG)."),(0,i.kt)("p",null,"To begin, first create a directory called ",(0,i.kt)("inlineCode",{parentName:"p"},"emporous-workspace")," which will contain the content Emporous will manage and enter the newly created directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir emporous-workspace\npushd emporous-workspace\n")),(0,i.kt)("p",null,"Now that a workspace is available, lets create a series of files for our file system use case. These files can be in any format, but let's create a mix of text files and jpeg photos."),(0,i.kt)("p",null,"Populate a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"overview.txt")," in the top level workspace directory with some sample content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'Hawaiian Resources' > overview.txt\n")),(0,i.kt)("p",null,"Next, create a directory called ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," which will contain two files: a text file containing a greeting along with a photo of a fish."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir content\ncd content\necho 'aloha' > aloha.txt\ncurl -LsO https://raw.githubusercontent.com/emporous/emporous-go/main/test/fish.jpg\npopd\n")),(0,i.kt)("p",null,"At this point, you should have three (files) in total as depicted by the output of the ",(0,i.kt)("inlineCode",{parentName:"p"},"tree")," command below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"tree emporous-workspace\n\nemporous-workspace\n\u251c\u2500\u2500 content\n\u2502   \u251c\u2500\u2500 aloha.txt\n\u2502   \u2514\u2500\u2500 fish.jpg\n\u2514\u2500\u2500 overview.txt\n\n1 directory, 3 files\n")),(0,i.kt)("h3",{id:"publishing-a-collection"},"Publishing a Collection"),(0,i.kt)("p",null,"With the desired set of files contained within the ",(0,i.kt)("inlineCode",{parentName:"p"},"emporous-workspace")," directory, the next step is to publish a collection. This process performs three actions:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Discovers all content within the workspace."),(0,i.kt)("li",{parentName:"ol"},"Produces an OCI artifact based on the content of the collection."),(0,i.kt)("li",{parentName:"ol"},"Publishes the artifact to a remote repository.")),(0,i.kt)("p",null,"To publish the collection to a remote registry, let's say that an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"registry")," was running on our local machine and there is the desire to publish the collection to ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost:5000/emporous/getting-started:latest"),"."),(0,i.kt)("p",null,"You can start by spinning up an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"registry")," using your container runtime of choice. The example below uses ",(0,i.kt)("inlineCode",{parentName:"p"},"docker"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d --rm -p 5000:5000 registry\n")),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"push")," subcommands, execute the following to publish the workspace to a remote registry. Additional options are also available for specifying the location of a file containing authentication details or communicating with an insecure or HTTP based registry if necessary."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"emporous build collection emporous-workspace localhost:5000/emporous/getting-started:latest\nemporous push --plain-http localhost:5000/emporous/getting-started:latest\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Example:"),(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"~$ emporous build collection emporous-workspace localhost:5000/emporous/getting-started:latest\n\nINFO[0000] Artifact sha256:d277f57979cba85359dd221607a936bd29fcac2341bc6a55f8c827803bb9d86a built with reference name localhost:5000/emporous/getting-started:latest\n\n~$ emporous push --plain-http localhost:5000/emporous/getting-started:latest\n\nINFO[0000] Artifact sha256:d277f57979cba85359dd221607a936bd29fcac2341bc6a55f8c827803bb9d86a published to localhost:5000/emporous/getting-started:latest\n"))),(0,i.kt)("p",null,"Do not be concerned about any ",(0,i.kt)("inlineCode",{parentName:"p"},"WARN")," messages in the output of the ",(0,i.kt)("em",{parentName:"p"},"push")," execution. These may be emitted by the underlying ",(0,i.kt)("a",{parentName:"p",href:"https://oras.land"},"ORAS")," library the client utilizes."),(0,i.kt)("h3",{id:"exploring-the-published-artifact"},"Exploring the Published Artifact"),(0,i.kt)("p",null,"With the collection published, lets explore the contents of the OCI artifact that the client produced. There are a number of tools that can be used to investigate the composition of resources within an OCI registry. For readability, we will use ",(0,i.kt)("inlineCode",{parentName:"p"},"skopeo")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"jq"),", however one could simply use ",(0,i.kt)("inlineCode",{parentName:"p"},"curl")," to produce the same results."),(0,i.kt)("p",null,"First, we will review the contents of the ",(0,i.kt)("a",{parentName:"p",href:"https://oras.land/cli/3_manifest_config/"},"manifest")," to view each of the layers that were published. The ",(0,i.kt)("inlineCode",{parentName:"p"},"skopeo inspect")," subcommand with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--raw")," flag will retrieve the contents of the manifest. The result can be piped to ",(0,i.kt)("inlineCode",{parentName:"p"},"jq")," to improve the readability. Note, the ",(0,i.kt)("inlineCode",{parentName:"p"},"--tls-verify=false")," flag also needs to be supplied in this instance as communication with the remote registry will utilize HTTP.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"skopeo inspect --raw --tls-verify=false docker://localhost:5000/emporous/getting-started:latest | jq\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Example:"),(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre"},'~$ skopeo inspect --raw --tls-verify=false docker://localhost:5000/emporous/getting-started:latest | jq\n{\n "schemaVersion": 2,\n "mediaType": "application/vnd.oci.image.manifest.v1+json",\n "config": {\n   "mediaType": "application/vnd.emporous.config.v1+json",\n   "digest": "sha256:5bd9c6ed24d5eb1396a586b700c39fb89da71d6006208ba8a99ffd04b4e28d90",\n   "size": 173\n },\n "layers": [\n   {\n     "mediaType": "image/jpeg",\n     "digest": "sha256:2e30f6131ce2164ed5ef017845130727291417d60a1be6fad669bdc4473289cd",\n     "size": 5536,\n     "annotations": {\n       "emporous.attributes": "{\\"converted\\":{\\"org.opencontainers.image.title\\":\\"content/fish.jpg\\"},\\"unknown\\":{}}",\n       "org.opencontainers.image.title": "content/fish.jpg"\n     }\n   },\n   {\n     "mediaType": "text/plain; charset=utf-8",\n     "digest": "sha256:908784d6a78ecc1e08b63aa4af486eadba500caeeb131b6406ad1bd210099386",\n     "size": 19,\n     "annotations": {\n       "emporous.attributes": "{\\"converted\\":{\\"org.opencontainers.image.title\\":\\"overview.txt\\"},\\"unknown\\":{}}",\n       "org.opencontainers.image.title": "overview.txt"\n     }\n   },\n   {\n     "mediaType": "text/plain; charset=utf-8",\n     "digest": "sha256:a79ec113dc7ece4dee24a5ffc967b4574c22270c99e9432773b63913ac62c95e",\n     "size": 6,\n     "annotations": {\n       "emporous.attributes": "{\\"converted\\":{\\"org.opencontainers.image.title\\":\\"content/aloha.txt\\"},\\"unknown\\":{}}",\n       "org.opencontainers.image.title": "content/aloha.txt"\n     }\n   }\n ],\n "annotations": {\n   "emporous.attributes": "{}"\n }\n}\n'))),(0,i.kt)("p",null,"Reviewing the contents of the retrieved manifest, the Emporous client published four (4) key items:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"A ",(0,i.kt)("a",{parentName:"li",href:"https://oras.land/cli/3_manifest_config/"},"Manifest Config")),(0,i.kt)("li",{parentName:"ol"},"A layer for each of the assets contained within the workspace. ")),(0,i.kt)("p",null,"Each item within the workspace becomes a layer within the artifact. By inspecting each layer, observe the properties that have been associated. For example, the picture of the fish:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "mediaType": "image/jpeg",\n  "digest": "sha256:2e30f6131ce2164ed5ef017845130727291417d60a1be6fad669bdc4473289cd",\n  "size": 5536,\n  "annotations": {\n    "emporous.attributes": "{\\"converted\\":{\\"org.opencontainers.image.title\\":\\"content/fish.jpg\\"},\\"unknown\\":{}}",\n    "org.opencontainers.image.title": "content/fish.jpg"\n}\n')),(0,i.kt)("p",null,"One can easily determine that the content contains a picture due to the ",(0,i.kt)("em",{parentName:"p"},"mediaType")," ",(0,i.kt)("inlineCode",{parentName:"p"},"image/jpeg"),". In addition, the client also adds the relative location within the workspace to the ",(0,i.kt)("inlineCode",{parentName:"p"},"org.opencontainers.image.title")," annotation of the layer representing the primary value for the content. This is used to reconstruct the assets as the artifact as a whole is retrieved. The topic of reassembly will be covered in the next section. Attributes specific to Emporous are also added under annotations as ",(0,i.kt)("inlineCode",{parentName:"p"},"emporous.attributes"),". We will see how we can leverage these attributes later in the ",(0,i.kt)("a",{parentName:"p",href:"#user-defined-attributes"},"User Defined Attributes")," section."),(0,i.kt)("h3",{id:"retrieving-a-collection"},"Retrieving a Collection"),(0,i.kt)("p",null,"Just as easy as it was to publish a collection, a collection can be retrieved from remote locations so that the contents can be reassembled locally. First, remove the existing ",(0,i.kt)("inlineCode",{parentName:"p"},"emporous-workspace")," directory locally if it still exists."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"rm -rf emporous-workspace\n")),(0,i.kt)("p",null,"Then, we will recreate an empty instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"emporous-workspace")," and use the ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," subcommand of the client, specify the reference of the artifact (collection) published to the registry previously. Since we are using an unsigned and insecure registry instance, we need to include the `",(0,i.kt)("inlineCode",{parentName:"p"},"--plain-http")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--no-verify")," options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir emporous-workspace && cd emporous-workspace\nemporous pull --plain-http --no-verify localhost:5000/emporous/getting-started:latest\n")),(0,i.kt)("p",null,"Example output:"),(0,i.kt)("blockquote",null,(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"~$ emporous pull --plain-http --no-verify localhost:5000/emporous/getting-started:latest\n\nINFO[0000] Found matching digest sha256:d277f57979cba85359dd221607a936bd29fcac2341bc6a55f8c827803bb9d86a \nINFO[0000] Found matching digest sha256:908784d6a78ecc1e08b63aa4af486eadba500caeeb131b6406ad1bd210099386 \nINFO[0000] Found matching digest sha256:ec1f8a8d6dcb53c52284e9f9e4190da1e9e71ee4a5b772a755c925cdae09c360 \nINFO[0000] Found matching digest sha256:2e30f6131ce2164ed5ef017845130727291417d60a1be6fad669bdc4473289cd \nINFO[0000] Found matching digest sha256:a79ec113dc7ece4dee24a5ffc967b4574c22270c99e9432773b63913ac62c95e \nINFO[0000] Copied collection(s) to .\n"))),(0,i.kt)("p",null,"Once again execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"tree")," command to verify the ",(0,i.kt)("inlineCode",{parentName:"p"},"emporous-workspace")," contains the expected contents: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"~$ tree\n\n.\n\u251c\u2500\u2500 content\n\u2502   \u251c\u2500\u2500 aloha.txt\n\u2502   \u2514\u2500\u2500 fish.jpg\n\u2514\u2500\u2500 overview.txt\n\n1 directory, 3 files\n")),(0,i.kt)("p",null,"As illustrated by the response, the collection successfully reassembled the contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"emporous-workspace")," directory. This was once again all made possible because of the ",(0,i.kt)("em",{parentName:"p"},"annotations")," within each layer of the artifact. In the next section, we will extend this concept of using metadata contained within an object to enable additional means of classifying resources."),(0,i.kt)("h2",{id:"user-defined-attributes"},"User Defined Attributes"),(0,i.kt)("p",null,"By default, the Emporous client attaches an annotation to each resource within a collection to associate the relative location of the content within a workspace using the key ",(0,i.kt)("inlineCode",{parentName:"p"},"org.opencontainers.image.title"),". This annotation is one of the well know ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/opencontainers/image-spec/blob/main/annotations.md"},"Predefined Keys")," as defined by the Open Container Initiative."),(0,i.kt)("p",null,"One of the key features of Emporous is the ability to ",(0,i.kt)("em",{parentName:"p"},"reference")," content amongst a variety of different content types. This is accomplished, you guessed it, through attributes associated to each piece of content, and in this case, annotations on the layer. Aside from the default values that are produced by the Emporous client, end users have the ability to define their own sets of attributes under the ",(0,i.kt)("inlineCode",{parentName:"p"},"emporous.attributes")," key of ",(0,i.kt)("inlineCode",{parentName:"p"},"annotations"),". This is accomplished using a ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSetConfiguration"),"."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSetConfiguration")," allows for a set of attributes to be associated with one or more resources within a collection and is represented in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: client.emporous.io/v1alpha1\nkind: DataSetConfiguration\nfiles:\n  - file: <pattern>\n    attributes:\n      key: value\n      key2: value2\n")),(0,i.kt)("p",null,"A set of attributes can be associated to a given pattern of content and multiple declarations can be present within the ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSetConfiguration"),"."),(0,i.kt)("p",null,"To demonstrate how a ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSetConfiguration")," can be used to transform the attributes of a collection, let's consider attributes that can be applied to the contents of the workspace contained in the ",(0,i.kt)("inlineCode",{parentName:"p"},"emporous-workspace")," directory."),(0,i.kt)("p",null,"In total, there are three files. Let's add a separate attribute to each file."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overview.txt")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"series: Hawaiian")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"content/aloha.txt")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"classification: greeting")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"content/fish.jpg")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"animal: fish"))),(0,i.kt)("p",null,"Mapping the desired attributes to the resources in the collection results in the following set of content that would be included within the ",(0,i.kt)("inlineCode",{parentName:"p"},"files")," property of a ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSetConfiguration"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- file: overview.txt\n  attributes:\n    series: Hawaiian\n- file: content/aloha.txt\n  attributes:\n    classification: greeting\n- file: content/fish.jpg\n  attributes:\n    animal: fish\n")),(0,i.kt)("p",null,"In addition, let's add an attribute, ",(0,i.kt)("inlineCode",{parentName:"p"},"content: 'true'"),", to each of the files within the ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," directory. This can be achieved using a wildcard pattern that retrieves all files within the ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," directory of the workspace shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- file: content/*\n  attributes:\n    content: 'true'\n")),(0,i.kt)("p",null,"Putting it all together, to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSetConfiguration")," resource in a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"dataset-configuration.yaml"),", execute the following in the ",(0,i.kt)("em",{parentName:"p"},"parent directory")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"emporous-workspace"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"cat << EOF > dataset-configuration.yaml\napiVersion: client.emporous.io/v1alpha1\nkind: DataSetConfiguration\ncollection:\n  files:\n    - file: overview.txt\n      attributes:\n        series: Hawaiian\n    - file: content/aloha.txt\n      attributes:\n        classification: greeting\n    - file: content/fish.jpg\n      attributes:\n        animal: fish\n    - file: content/*\n      attributes:\n        content: 'true'\nEOF\n")),(0,i.kt)("p",null,"Associating a ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSetConfiguration")," to a collection is achieved when building a workspace by specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"--dsconfig")," flag and referencing the location of the resource."),(0,i.kt)("h3",{id:"publishing-a-collection-with-attributes"},"Publishing a Collection With Attributes"),(0,i.kt)("p",null,"Build and publish a new tag of the collection called ",(0,i.kt)("inlineCode",{parentName:"p"},"dsconfig")," with the additional metadata associated to the content by executing the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"emporous build collection emporous-workspace localhost:5000/emporous/getting-started:dsconfig --dsconfig=dataset-configuration.yaml\nemporous push --plain-http localhost:5000/emporous/getting-started:dsconfig\n")),(0,i.kt)("p",null,"Example output:"),(0,i.kt)("blockquote",null,(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"~$ emporous build collection emporous-workspace localhost:5000/emporous/getting-started:dsconfig --dsconfig=dataset-configuration.yaml\nINFO[0000] Artifact sha256:abf36eacbe1ae024a00ea468c383bcf5cfb94895044f9001b317b7fd7fc3b1b2 built with reference name localhost:5000/emporous/getting-started:dsconfig\n\n~$ emporous push --plain-http localhost:5000/emporous/getting-started:dsconfig\nINFO[0000] Artifact sha256:abf36eacbe1ae024a00ea468c383bcf5cfb94895044f9001b317b7fd7fc3b1b2 published to localhost:5000/emporous/getting-started:dsconfig\n"))),(0,i.kt)("p",null,"Retrieve the manifest of the published artifact verify the attributes were added as annotations to the collection content as defined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSetConfiguration")," resource."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'skopeo inspect --raw --tls-verify=false docker://localhost:5000/emporous/getting-started:dsconfig | jq\n\n{\n  "schemaVersion": 2,\n  "mediaType": "application/vnd.oci.image.manifest.v1+json",\n  "config": {\n    "mediaType": "application/vnd.emporous.config.v1+json",\n    "digest": "sha256:86ab844cd9e27c9d612e226864f1fb4c5e6b6526e7e2b4fdecf0d5ff22b3524d",\n    "size": 687\n  },\n  "layers": [\n    {\n      "mediaType": "image/jpeg",\n      "digest": "sha256:2e30f6131ce2164ed5ef017845130727291417d60a1be6fad669bdc4473289cd",\n      "size": 5536,\n      "annotations": {\n        "emporous.attributes": "{\\"converted\\":{\\"org.opencontainers.image.title\\":\\"content/fish.jpg\\"},\\"unknown\\":{\\"animal\\":\\"fish\\",\\"content\\":\\"true\\"}}",\n        "org.opencontainers.image.title": "content/fish.jpg"\n      }\n    },\n    {\n      "mediaType": "text/plain; charset=utf-8",\n      "digest": "sha256:908784d6a78ecc1e08b63aa4af486eadba500caeeb131b6406ad1bd210099386",\n      "size": 19,\n      "annotations": {\n        "emporous.attributes": "{\\"converted\\":{\\"org.opencontainers.image.title\\":\\"overview.txt\\"},\\"unknown\\":{\\"series\\":\\"Hawaiian\\"}}",\n        "org.opencontainers.image.title": "overview.txt"\n      }\n    },\n    {\n      "mediaType": "text/plain; charset=utf-8",\n      "digest": "sha256:a79ec113dc7ece4dee24a5ffc967b4574c22270c99e9432773b63913ac62c95e",\n      "size": 6,\n      "annotations": {\n        "emporous.attributes": "{\\"converted\\":{\\"org.opencontainers.image.title\\":\\"content/aloha.txt\\"},\\"unknown\\":{\\"classification\\":\\"greeting\\",\\"content\\":\\"true\\"}}",\n        "org.opencontainers.image.title": "content/aloha.txt"\n      }\n    }\n  ],\n  "annotations": {\n    "emporous.attributes": "{}"\n  }\n}\n')),(0,i.kt)("p",null,"Notice how each layer representing the collection content now has user defined attributes associated to them. In addition, the ",(0,i.kt)("inlineCode",{parentName:"p"},"fish.jpg")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"aloha.txt")," resources that are contained in the ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," directory have the additional annotation ",(0,i.kt)("inlineCode",{parentName:"p"},"content: 'true'")," as they matched the wildcard pattern as defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSetConfiguration"),". Defining attributes is easy and unlocks the various ways that you will be able to interact with the content."),(0,i.kt)("h3",{id:"filtering-content-by-attributes"},"Filtering Content by Attributes"),(0,i.kt)("p",null,"Defining attributes within a collection enables the ability to restrict the content that is retrieved from a collection in a remote registry. The presence of the additional annotations does not change the default functionality of the ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," subcommand within the client. However, it does provide the capability to specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"--attributes")," flag which allows for a set of key/value pairs to be defined which will attempt to match any of the annotation within the content."),(0,i.kt)("p",null,'For example, within the previously published collection, instead of retrieving all three files, let\'s say that we are only concerned with assets that are classified as "content". Since the attribute ',(0,i.kt)("inlineCode",{parentName:"p"},"content: 'true'")," was defined on the ",(0,i.kt)("inlineCode",{parentName:"p"},"fish.jpg")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"aloha.txt")," files, we can filter out only those resources when retrieving the collection."),(0,i.kt)("p",null,"First we'll create a ",(0,i.kt)("inlineCode",{parentName:"p"},"yaml")," file with the filter we want to apply:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cat <<EOF> attributes.yaml\nkind: AttributeQuery\napiVersion: client.emporous.io/v1alpha1\nattributes:\n  unknown:\n    content: "true"\nEOF\n')),(0,i.kt)("p",null,"Now you can execute the following commands to ",(0,i.kt)("em",{parentName:"p"},"pull"),' the collection containing only "content" and store the retrieved assets in a directory called ',(0,i.kt)("inlineCode",{parentName:"p"},"emporous-workspace-filtered")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir emporous-workspace-filtered && cd emporous-workspace-filtered\nemporous pull --plain-http --no-verify --attributes=../attributes.yaml localhost:5000/emporous/getting-started:dsconfig\n\nINFO[0000] Found matching digest sha256:52c283af2991332b686a5eee855e963a1199e6a2745ff5b6a78218821a6a0e4e \nINFO[0000] Found matching digest sha256:86ab844cd9e27c9d612e226864f1fb4c5e6b6526e7e2b4fdecf0d5ff22b3524d \nINFO[0000] Found matching digest sha256:2e30f6131ce2164ed5ef017845130727291417d60a1be6fad669bdc4473289cd \nINFO[0000] Found matching digest sha256:a79ec113dc7ece4dee24a5ffc967b4574c22270c99e9432773b63913ac62c95e \nINFO[0000] Copied collection(s) to .\n")),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"tree")," command one final time, confirm that only the assets denoted by the annotation ",(0,i.kt)("inlineCode",{parentName:"p"},"content: 'true'")," were retrieved."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"~$ tree\n\n.\n\u2514\u2500\u2500 content\n    \u251c\u2500\u2500 aloha.txt\n    \u2514\u2500\u2500 fish.jpg\n\n1 directory, 2 files \n")),(0,i.kt)("p",null,"For this occasion, only two files were retrieved with the file called ",(0,i.kt)("inlineCode",{parentName:"p"},"overview.txt")," being omitted as it did not have the desired annotation present."),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"Now that you have an understanding of how to interact with the Emporous, here are some additional areas of investigation to explore:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Explore the ",(0,i.kt)("a",{parentName:"li",href:"https://oras.land"},"ORAS project")),(0,i.kt)("li",{parentName:"ul"},"Publishing a variety of content types within a collection"),(0,i.kt)("li",{parentName:"ul"},"Retrieving contents from a collection by specifying multiple attributes")))}d.isMDXComponent=!0}}]);